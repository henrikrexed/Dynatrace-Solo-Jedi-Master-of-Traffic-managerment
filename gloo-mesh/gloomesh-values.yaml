glooMgmtServer:
  enabled: true
  ports:
    healthcheck: 8091
prometheus:
  enabled: true
redis:
  deployment:
    enabled: true
glooUi:
  enabled: true
  serviceType: LoadBalancer
glooAgent:
  enabled: true
  relay:
    serverAddress: gloo-mesh-mgmt-server:9900
    authority: gloo-mesh-mgmt-server.gloo-mesh
extAuthService:
  enabled: true
  extAuth: 
    apiKeyStorage: 
      name: redis
      enabled: true
      config: 
        connection: 
          host: redis.gloo-mesh-addons:6379
      secretKey: ThisIsSecret
rateLimiter:
  enabled: true
telemetryGateway:
  enabled: true
  service:
    type: LoadBalancer
  extraEnvs:
    - name: DT_ENDPOINT
      valueFrom:
        secretKeyRef:
          name: dynatrace
          key: dynatrace_oltp_url
    - name: DT_API_TOKEN
      valueFrom:
        secretKeyRef:
          name: dynatrace
          key: dt_api_token
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
telemetryCollector:
  enabled: true
  config:
    exporters:
      otlp:
        endpoint: gloo-telemetry-gateway.gloo-mesh.svc:4317
  service:
    internalTrafficPolicy: Cluster
  ports:
    grpc-otlp:
      enabled: true
      containerPort: 4317
      servicePort: 4317
      hostPort: 4317
      protocol: TCP
      appProtocol: grpc
    otlp:
      enabled: false
      containerPort: 4317
      servicePort: 4317
      hostPort: 4317
      protocol: TCP
      appProtocol: grpc
telemetryCollectorCustomization:
  extraExporters:
    logging/mesh:
      verbosity: normal
  extraPipelines:
    logs/mesh:
      receivers:
        - otlp
      processors: [memory_limiter, batch]
      exporters: 
        - logging/mesh
        - otlp
    traces/mesh:
      receivers:
        - otlp
      processors: [memory_limiter, batch]
      exporters: 
        - logging/mesh
        - otlp
telemetryGatewayCustomization:
  extraExporters:
    logging/mesh:
      verbosity: normal # detailed
    otlphttp/dt:
      endpoint: $DT_ENDPOINT/api/v2/otlp
      headers:
        Authorization: "Api-Token $DT_API_TOKEN"
  extraPipelines:
    logs/dt:
      receivers: [otlp]
      processors: [memory_limiter, batch]
      exporters: 
        - otlphttp/dt
        - logging/mesh
    traces/dt: 
      receivers: [otlp]
      processors: [memory_limiter, batch]
      exporters:
        - otlphttp/dt
        - logging/mesh
    # metrics/dt:
    #   receivers:
    #     - otlp
    #     - prometheus
    #   # processors: [batch,filter, cumulativetodelta, memory_limiter]
    #   processors: [batch, memory_limiter]
    #   exporters:
    #     # - otlphttp/dt
    #     - logging/mesh
