glooMgmtServer:
  enabled: true
  ports:
    healthcheck: 8091
prometheus:
  enabled: true
redis:
  deployment:
    enabled: true
glooUi:
  enabled: true
  serviceType: LoadBalancer
glooAgent:
  enabled: true
  relay:
    serverAddress: gloo-mesh-mgmt-server:9900
    authority: gloo-mesh-mgmt-server.gloo-mesh
extAuthService:
  enabled: true
  extAuth: 
    apiKeyStorage: 
      name: redis
      enabled: true
      config: 
        connection: 
          host: redis.gloo-mesh-addons:6379
      secretKey: ThisIsSecret
rateLimiter:
  enabled: true
telemetryGateway:
  enabled: true
  service:
    type: LoadBalancer
  extraEnvs:
    - name: DT_ENDPOINT
      valueFrom:
        secretKeyRef:
          name: dynatrace
          key: dynatrace_oltp_url
    - name: DT_API_TOKEN
      valueFrom:
        secretKeyRef:
          name: dynatrace
          key: dt_api_token
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
telemetryCollector:
  enabled: true
  config:
    exporters:
      otlp:
        endpoint: gloo-telemetry-gateway.gloo-mesh.svc:4317
  service:
    internalTrafficPolicy: Cluster
  ports:
    grpc-otlp:
      enabled: true
      containerPort: 4317
      servicePort: 4317
      hostPort: 4317
      protocol: TCP
      appProtocol: grpc
    otlp:
      enabled: false
      containerPort: 4317
      servicePort: 4317
      hostPort: 4317
      protocol: TCP
      appProtocol: grpc
telemetryCollectorCustomization:
  extraExporters:
    logging/mesh:
      verbosity: normal
  extraPipelines:
    logs/mesh:
      receivers:
        - otlp
      processors: [memory_limiter, batch]
      exporters: 
        - logging/mesh
        - otlp
    traces/mesh:
      receivers:
        - otlp
      processors: [memory_limiter, batch]
      exporters: 
        - logging/mesh
        - otlp
  pipelines:
    metrics/ui:
      pipeline:
        exporters:
          - otlp
        processors:
          - memory_limiter
          # - filter/min
          - batch
          # - attributes/drop_extra_istio_labels
          - attributes/drop_extra_otel_labels
          - gloo_metrics_processor
        receivers:
          - prometheus
telemetryGatewayCustomization:
  extraReceivers:
    prometheus/gloo-mgmt:
      config:
        scrape_configs:
        - job_name: gloo-mesh-mgmt-server-otel
          honor_labels: true
          kubernetes_sd_configs:
          - namespaces:
              names:
              - gloo-mesh
            role: pod
          relabel_configs:
          - action: keep
            regex: gloo-mesh-mgmt-server|gloo-mesh-ui
            source_labels:
            - __meta_kubernetes_pod_label_app
          - action: keep
            regex: true
            source_labels:
            - __meta_kubernetes_pod_annotation_prometheus_io_scrape
          - action: drop
            regex: true
            source_labels:
            - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow
          - action: replace
            regex: (https?)
            source_labels:
            - __meta_kubernetes_pod_annotation_prometheus_io_scheme
            target_label: __scheme__
          - action: replace
            regex: (.+)
            source_labels:
            - __meta_kubernetes_pod_annotation_prometheus_io_path
            target_label: __metrics_path__
          - action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $$1:$$2
            source_labels:
            - __address__
            - __meta_kubernetes_pod_annotation_prometheus_io_port
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
            replacement: __param_$$1
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - action: replace
            source_labels:
            - __meta_kubernetes_namespace
            target_label: namespace
          - action: replace
            source_labels:
            - __meta_kubernetes_pod_name
            target_label: pod
          - action: drop
            regex: Pending|Succeeded|Failed|Completed
            source_labels:
            - __meta_kubernetes_pod_phase
  extraExporters:
    logging/mesh:
      verbosity: normal # detailed
    otlphttp/dt:
      endpoint: $DT_ENDPOINT/api/v2/otlp
      headers:
        Authorization: "Api-Token $DT_API_TOKEN"
  extraProcessors:
    cumulativetodelta:
    filter:
      error_mode: ignore
      metrics:
        metric:
          - 'type == METRIC_DATA_TYPE_HISTOGRAM'
  extraPipelines:
    logs/dt:
      receivers: [otlp]
      processors: [memory_limiter, batch]
      exporters: 
        - otlphttp/dt
    traces/dt: 
      receivers: [otlp]
      processors: [memory_limiter, batch]
      exporters:
        - otlphttp/dt
    metrics/dt:
      receivers:
        - otlp
        - prometheus/gloo-mgmt
        - prometheus
      processors: [memory_limiter, filter, cumulativetodelta, batch]
      exporters:
        - otlphttp/dt

